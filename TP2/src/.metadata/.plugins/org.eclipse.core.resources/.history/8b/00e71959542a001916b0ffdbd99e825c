package tp2;

import java.util.Random;
import java.util.ArrayList;

public class LinearSpacePerfectHashing<AnyType>
{
   static int p = 46337;
   
   int a, b, n, memorySize;
   QuadraticSpacePerfectHashing<AnyType>[] data;
   Random generator;
   
   LinearSpacePerfectHashing()
   {
      clear();
   }
   
   LinearSpacePerfectHashing(ArrayList<AnyType> array)
   {
      allocateMemory(array);
   }
   
   public void setArray(ArrayList<AnyType> array)
   {
      allocateMemory(array);
   }
   
   public int size()
   {
      return n;
   }

   public void clear()
   {
      generator = new Random( System.nanoTime() );
      a = b = n = memorySize = 0; 
      data = null;
   }

   private int findPos(AnyType x)
   {
      // completer
	  int hash = x.hashCode();
	  int y = ((a*hash)%p)%n;
	  
	  while(y<0 || y>=n) {
		  hash = x.hashCode();
		  y = ((a*hash)%p)%n;
	  }
	  
      return y;
   }
   
   public boolean contains(AnyType x)
   {      
      // completer
	  for(int i=0;i<data.length;i++) {
		  if(data[i] == x) {
			  return true;
		  }
	  }
      return false;
   }
      
   @SuppressWarnings("unchecked")
   private void allocateMemory(ArrayList<AnyType> array)
   {
      clear();
      
      if(array == null || array.size() == 0) return;

      n    = array.size();
      data = new QuadraticSpacePerfectHashing[n];
      
      if(n == 1)
      {
         // Completer
    	 data[0] = new QuadraticSpacePerfectHashing<AnyType>(array);
    	 
    	// items = (AnyType[]) new Object[m];
    	 
    	 /*AnyType  tmp = ArrayList<AnyType>[] new Object[1];
    	 
    			 tmp.add(arrsy.get(0))
    			 data[0].setArray(array);*/
    	 memorySize = 1;
         return;
      }
      
      for(int i=0;i<array.size();i++) {
    	  int pos =findPos(array.get(i));
    	  if(data[pos] == null) {
    		  ArrayList<AnyType>dummyArray = new ArrayList<AnyType>(1);
    		  dummyArray.add(array.get(i));
    		  data[pos] = new QuadraticSpacePerfectHashing<AnyType>(dummyArray);
    	  }
      }
      // A completer
   }
   
   public int memorySize() 
   {
      return memorySize;
   }
   
   public String toString(){
      StringBuilder sb = new StringBuilder();
      
      // completer
      
      return sb.toString();
   }
}

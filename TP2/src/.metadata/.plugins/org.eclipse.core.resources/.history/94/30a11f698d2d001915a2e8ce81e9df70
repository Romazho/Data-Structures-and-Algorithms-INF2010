package tp2;

import java.util.ArrayList;
import java.util.Random;

public class QuadraticSpacePerfectHashing<AnyType> 
{
   static int p = 46337;

   int a, b, m, n;
   AnyType[] items;
   Random generator;

   QuadraticSpacePerfectHashing()
   {
      clear();
   }

   QuadraticSpacePerfectHashing(ArrayList<AnyType> array)
   {
      allocateMemory(array);
   }

   public void setArray(ArrayList<AnyType> array)
   {
      allocateMemory(array);
   }

   public int size()
   {
      return n;
   }

   public void clear()
   {
      generator = new Random( System.nanoTime() );
      a = b = m = n = 0; 
      items = null;
   }

   private int findPos(AnyType x)
   {
      // Completer
	  
	  int hash = x.hashCode();
	  
	  /*int pos = 0;
	  for(int i=0; i<items.length; i++) {
		  if(items[i] == x) {
			   pos = i;
			   
		  }
	  }*/
	  int y = ((a*hash+b)%p)%m;
	  
	  while(y < 0 || y >= m) {
		  hash = x.hashCode();
		  y = ((a*hash+b)%p)%m;
	  }
	  return y;
	  
   }

   public boolean contains(AnyType x )
   {
      if( n == 0 ) return false; 

      int index = findPos(x);

      return ( ( items[index] != null ) && ( items[index].equals(x) ) );
   }

   @SuppressWarnings("unchecked")
   private void allocateMemory(ArrayList<AnyType> array)
   {
      clear();

      if(array == null || array.size() == 0) return;

      n = array.size();
      m = n*n;

      if(n == 1)
      {
         items = (AnyType[]) new Object[m];
         items[0]	= array.get(0);
         return;
      }

      while( unsuccessfulMemoryAllocation( array ) );
   }

   @SuppressWarnings("unchecked")
   private boolean unsuccessfulMemoryAllocation(ArrayList<AnyType> array)
   {
      // A completer
	  a=0;
	  while(a == 0 && a<p) {
	  a = generator.nextInt(p);
	  }
	  b = generator.nextInt(p);
	  
	  items = (AnyType[]) new Object[m]; // on alloue l'espace mÃ©moire requis
	  
	  for(int i=0; i<array.size();i++) {
		  
		  int aleatoire =findPos(array.get(i));
		  
		  if(items[aleatoire] != null) { //a utiliser la fonction contains...
			  return true;
		  }
		  else if(items[aleatoire] == null) {
			  items[aleatoire] = array.get(i);
		  }
	  }
      return false;
   }
   
   public int memorySize() 
   {
      return m;
   }
   
   public String toString(){
      if(n == 0) 
         return "";
      
      StringBuilder sb = new StringBuilder();
      
      for(AnyType item : items) 
         if( item != null ) 
            sb.append(item + ", ");
      
      return sb.toString();
   }
}
